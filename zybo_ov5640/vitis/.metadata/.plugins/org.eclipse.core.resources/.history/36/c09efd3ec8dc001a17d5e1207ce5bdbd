#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "sleep.h"
#include "xiicps.h"

// I2C parameters
#define IIC_SCLK_RATE       100000  // clock 100KHz
//#define CAMERA_ADDRESS      0x21    // 7bit address 0bit=1:write 0:read
#define CAMERA_ADDRESS      (0x78>>1)    //=0x3C 7bit address + 0bit=1:write 0:read
#define IIC_DEVICE_ID       XPAR_XIICPS_0_DEVICE_ID
uint8_t const dev_ID_h_ = 0x56;
uint8_t const dev_ID_l_ = 0x40;
uint16_t const reg_ID_h = 0x300A;
uint16_t const reg_ID_l = 0x300B;

int Init(void);
int i2c_write(XIicPs *Iic, u16 _register, u8 _command);
int i2c_read(XIicPs *Iic, u8* buff, u32 len, u16 i2c_adder);
int WriteReg(u16 _register, u8 _command);
int ReadReg(u16 reg);

XIicPs Iic;

int Init()
{
    int Status;
    XIicPs_Config *Config;  /**< configuration information for the device */

    Config = XIicPs_LookupConfig(IIC_DEVICE_ID);
    if(Config == NULL){
        printf("Error: XIicPs_LookupConfig()\n");
        return XST_FAILURE;
    }

    Status = XIicPs_CfgInitialize(&Iic, Config, Config->BaseAddress);
    if(Status != XST_SUCCESS){
        printf("Error: XIicPs_CfgInitialize()\n");
        return XST_FAILURE;
    }

    Status = XIicPs_SelfTest(&Iic);
    if(Status != XST_SUCCESS){
        printf("Error: XIicPs_SelfTest()\n");
        return XST_FAILURE;
    }

    XIicPs_SetSClk(&Iic, IIC_SCLK_RATE);
    printf("I2C configuration done.\n");

    uint8_t id_h, id_l;
	id_h = ReadReg(reg_ID_h);
	id_l = ReadReg(reg_ID_l);
	if (id_h != dev_ID_h_ || id_l != dev_ID_l_)
	{
		char msg[100];
		snprintf(msg, sizeof(msg), "Got %02x %02x. Expected %02x %02x\r\n", id_h, id_l, dev_ID_h_, dev_ID_l_);
	}
	else {
		char msg[100];
		snprintf(msg, sizeof(msg), "Got %02x %02x. Expected %02x %02x\r\n", id_h, id_l, dev_ID_h_, dev_ID_l_);
		printf("Camera register matched!\n");
	}

	//[1]=0 System input clock from pad; Default read = 0x11
	WriteReg(0x3103, 0x11);
	//[7]=1 Software reset; [6]=0 Software power down; Default=0x02
	WriteReg(0x3008, 0x82);
	usleep(300*1000);

    return XST_SUCCESS;
}

int i2c_write(XIicPs *Iic, u16 _register, u8 _command)
{
    int Status;
    u8 buffer[3];
    buffer[0] = (u8) (_register >> 8); //upper
    buffer[1] = (u8) (_register);//lower
    buffer[2] = _command;

    Status = XIicPs_MasterSendPolled(Iic, buffer, 2, CAMERA_ADDRESS);
    if(Status != XST_SUCCESS){
		xil_printf("WriteReg:I2C Write Fail\n");
		return XST_FAILURE;
	}

    if(Status != XST_SUCCESS){
        return XST_FAILURE;
    }

    // Wait until bus is idle to start another transfer.
    while(XIicPs_BusIsBusy(Iic)){
        /* NOP */
    }
    usleep(30*1000);	// wait 30ms
    return XST_SUCCESS;
}

/*
int i2c_read(XIicPs *Iic, u8* buff, u32 len, u16 i2c_adder)
{
    int Status;

    Status = XIicPs_MasterRecvPolled(Iic, buff, len, i2c_adder);

    if (Status == XST_SUCCESS)
        return XST_SUCCESS;
    else
        return -1;
}
*/

int WriteReg(u16 _register, u8 _command){
	return i2c_write(&Iic, _register, _command);
}

int ReadReg(u16 reg)
{
	u8 buff[2];

	buff[0] = (u8) (reg >> 8);
	buff[1] = (u8) (reg);
	xil_printf("%02x %02x\n",buff[0],buff[1]);

	XIicPs_MasterRecvPolled(&Iic, buff, 1, CAMERA_ADDRESS); //return data in buff[0] (1byte)
	while(XIicPs_BusIsBusy(&Iic)){
		/* NOP */
	}
	xil_printf("return %02x\n",buff[0]);
	return buff[0]; //return 1byte
}

int main()
{
	init_platform();

    if(Init()==XST_SUCCESS){
    	printf("Camera module initialize complete!\n");
    }


    print("Hello World\n\r");

    cleanup_platform();
    return 0;
}
