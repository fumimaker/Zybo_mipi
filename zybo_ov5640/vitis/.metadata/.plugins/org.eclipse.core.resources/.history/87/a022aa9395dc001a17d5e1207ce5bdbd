#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "sleep.h"
#include "xiicps.h"

// I2C parameters
#define IIC_SCLK_RATE       100000  // clock 100KHz
#define OV7670_ADDRESS      0x21    // 7bit address 0bit=1:write 0:read
#define IIC_DEVICE_ID       XPAR_XIICPS_0_DEVICE_ID
XIicPs Iic;

int Init()
{
    int Status, result;
    XIicPs_Config *Config;  /**< configuration information for the device */

    Config = XIicPs_LookupConfig(IIC_DEVICE_ID);
    if(Config == NULL){
        printf("Error: XIicPs_LookupConfig()\n");
        return XST_FAILURE;
    }

    Status = XIicPs_CfgInitialize(&Iic, Config, Config->BaseAddress);
    if(Status != XST_SUCCESS){
        printf("Error: XIicPs_CfgInitialize()\n");
        return XST_FAILURE;
    }

    Status = XIicPs_SelfTest(&Iic);
    if(Status != XST_SUCCESS){
        printf("Error: XIicPs_SelfTest()\n");
        return XST_FAILURE;
    }

    XIicPs_SetSClk(&Iic, IIC_SCLK_RATE);
    printf("I2C configuration done.\n");

    uint8_t id_h, id_l;
	readReg(reg_ID_h, id_h);
	readReg(reg_ID_l, id_l);
	result = WriteReg(REG_COM7, COM7_RESET);
	if(result != XST_SUCCESS){
		xil_printf("Error: OV767 RESET\n");
		return XST_FAILURE;
	}
	usleep(300*1000);

    return XST_SUCCESS;
}

int i2c_write(XIicPs *Iic, u8 _register, u8 _command)
{
    int Status;
    u8 buffer[2];
    buffer[0] = _register;
    buffer[1] = _command;

    Status = XIicPs_MasterSendPolled(Iic, buffer, 2, OV7670_ADDRESS);
    if(Status != XST_SUCCESS){
		xil_printf("WriteReg:I2C Write Fail\n");
		return XST_FAILURE;
	}

    if(Status != XST_SUCCESS){
        return XST_FAILURE;
    }

    // Wait until bus is idle to start another transfer.
    while(XIicPs_BusIsBusy(Iic)){
        /* NOP */
    }
    usleep(30*1000);	// wait 30ms
    return XST_SUCCESS;
}


int i2c_read(XIicPs *Iic, u8* buff, u32 len, u16 i2c_adder)
{
    int Status;

    Status = XIicPs_MasterRecvPolled(Iic, buff, len, i2c_adder);

    if (Status == XST_SUCCESS)
        return XST_SUCCESS;
    else
        return -1;
}

int WriteReg(u8 _register, u8 _command){
	return i2c_write(&Iic, _register, _command);
}

int ReadReg(u8 reg)
{
	u8 buff[2];

	buff[0] = reg;
	XIicPs_MasterSendPolled(&Iic, buff, 1, OV7670_ADDRESS);
	while(XIicPs_BusIsBusy(&Iic)){
		/* NOP */
	}

	XIicPs_MasterRecvPolled(&Iic, buff, 1, OV7670_ADDRESS);
	while(XIicPs_BusIsBusy(&Iic)){
		/* NOP */
	}

	return buff[0];
}

int main()
{
    init_platform();

    print("Hello World\n\r");

    cleanup_platform();
    return 0;
}
